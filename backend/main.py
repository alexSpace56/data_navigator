from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from chroma_utils import index_database, query_database
from llm_utils import llm_processor

app = FastAPI()
app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_methods=["*"])


class QueryRequest(BaseModel):
    question: str


@app.post("/api/query")
async def process_query(request: QueryRequest):
    try:
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.question}")

        # –ò—â–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        results = query_database(request.question)

        if not results or not results['documents'] or not results['documents'][0]:
            print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            return {
                "answer": "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                "context": []
            }

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results['documents'][0])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = []
        for i, (doc, metadata) in enumerate(zip(results['documents'][0], results['metadatas'][0])):
            context.append({
                "description": doc,
                "type": metadata.get('type', 'object'),
                "name": metadata.get('name', ''),
                "table_name": metadata.get('table_name', '')
            })

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        answer = llm_processor.generate_response(request.question, context)

        print(f"üì§ –û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤: {answer[:100]}...")

        return {
            "answer": answer,
            "context": context
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_query: {e}")
        return {
            "answer": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "error": str(e)
        }


@app.post("/api/index")
async def reindex():
    try:
        count = index_database()
        return {"message": f"–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {count} —Ç–∞–±–ª–∏—Ü"}
    except Exception as e:
        raise HTTPException(500, str(e))